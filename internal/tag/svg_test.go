package tag

import (
	"bytes"
	"image"
	"image/color"
	"testing"

	svg "github.com/ajstarks/svgo"
	"github.com/stretchr/testify/suite"
)

type SVGSuite struct {
	suite.Suite
}

func TestSVGSuite(t *testing.T) {
	suite.Run(t, new(SVGSuite))
}

func (s *SVGSuite) TestColorRendering() {
	testdata := []struct {
		Color    color.Color
		Expected string
	}{
		{color.Black, "#000000"},
		{color.White, "#ffffff"},
		{color.RGBA{127, 127, 127, 255}, "#7f7f7f"},
		{color.RGBA{0xff, 0x00, 0x00, 0xf0}, "#ff0000f0"},
	}

	for _, d := range testdata {
		s.Run(d.Expected, func() {
			s.Equal(ColorToHex(d.Color), d.Expected)
		})
	}
}

func (s *SVGSuite) TestBuildPath() {
	testdata := []struct {
		Name     string
		Polygons []Polygon
		Expected string
	}{
		{
			"BlackDonut",
			[]Polygon{
				{color.Black, []image.Point{{0, 0}, {3, 0}, {3, 3}, {0, 3}}},
				{color.White, []image.Point{{1, 1}, {2, 1}, {2, 2}, {1, 2}}},
			},
			`<?xml version="1.0"?>
<!-- Generated by SVGo -->
<svg width="10px" height="10px"
     style="background-color:#ffffff;"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
<path d="M0 0 L3 0 3 3 0 3 z M1 1 L2 1 2 2 1 2 z" style="fill:#000000;fill-rule:evenodd" />
</svg>
`,
		},
	}
	for _, d := range testdata {
		s.Run(d.Name, func() {
			s.testBuildPath(d.Polygons, d.Expected)
		})
	}
}

func (s *SVGSuite) testBuildPath(polygons []Polygon, expected string) {
	buf := bytes.NewBuffer(nil)
	defer func() { s.Equal(expected, string(buf.Bytes())) }()
	SVG := svg.New(buf)

	SVG.Startunit(10, 10, "px", "style=\"background-color:#ffffff;\"")

	RenderToSVG(SVG, polygons)

	SVG.End()

}
