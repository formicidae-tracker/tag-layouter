// Code generated by mockery v2.33.2. DO NOT EDIT.

package main

import (
	image "image"
	color "image/color"

	mock "github.com/stretchr/testify/mock"
)

// MockDrawer is an autogenerated mock type for the Drawer type
type MockDrawer struct {
	mock.Mock
}

type MockDrawer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDrawer) EXPECT() *MockDrawer_Expecter {
	return &MockDrawer_Expecter{mock: &_m.Mock}
}

// DrawRectangle provides a mock function with given fields: _a0, _a1
func (_m *MockDrawer) DrawRectangle(_a0 image.Rectangle, _a1 color.Gray) {
	_m.Called(_a0, _a1)
}

// MockDrawer_DrawRectangle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DrawRectangle'
type MockDrawer_DrawRectangle_Call struct {
	*mock.Call
}

// DrawRectangle is a helper method to define mock.On call
//   - _a0 image.Rectangle
//   - _a1 color.Gray
func (_e *MockDrawer_Expecter) DrawRectangle(_a0 interface{}, _a1 interface{}) *MockDrawer_DrawRectangle_Call {
	return &MockDrawer_DrawRectangle_Call{Call: _e.mock.On("DrawRectangle", _a0, _a1)}
}

func (_c *MockDrawer_DrawRectangle_Call) Run(run func(_a0 image.Rectangle, _a1 color.Gray)) *MockDrawer_DrawRectangle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(image.Rectangle), args[1].(color.Gray))
	})
	return _c
}

func (_c *MockDrawer_DrawRectangle_Call) Return() *MockDrawer_DrawRectangle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDrawer_DrawRectangle_Call) RunAndReturn(run func(image.Rectangle, color.Gray)) *MockDrawer_DrawRectangle_Call {
	_c.Call.Return(run)
	return _c
}

// EndTranslate provides a mock function with given fields:
func (_m *MockDrawer) EndTranslate() {
	_m.Called()
}

// MockDrawer_EndTranslate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndTranslate'
type MockDrawer_EndTranslate_Call struct {
	*mock.Call
}

// EndTranslate is a helper method to define mock.On call
func (_e *MockDrawer_Expecter) EndTranslate() *MockDrawer_EndTranslate_Call {
	return &MockDrawer_EndTranslate_Call{Call: _e.mock.On("EndTranslate")}
}

func (_c *MockDrawer_EndTranslate_Call) Run(run func()) *MockDrawer_EndTranslate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDrawer_EndTranslate_Call) Return() *MockDrawer_EndTranslate_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDrawer_EndTranslate_Call) RunAndReturn(run func()) *MockDrawer_EndTranslate_Call {
	_c.Call.Return(run)
	return _c
}

// Label provides a mock function with given fields: p, s, size, c
func (_m *MockDrawer) Label(p image.Point, s string, size int, c color.Gray) {
	_m.Called(p, s, size, c)
}

// MockDrawer_Label_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Label'
type MockDrawer_Label_Call struct {
	*mock.Call
}

// Label is a helper method to define mock.On call
//   - p image.Point
//   - s string
//   - size int
//   - c color.Gray
func (_e *MockDrawer_Expecter) Label(p interface{}, s interface{}, size interface{}, c interface{}) *MockDrawer_Label_Call {
	return &MockDrawer_Label_Call{Call: _e.mock.On("Label", p, s, size, c)}
}

func (_c *MockDrawer_Label_Call) Run(run func(p image.Point, s string, size int, c color.Gray)) *MockDrawer_Label_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(image.Point), args[1].(string), args[2].(int), args[3].(color.Gray))
	})
	return _c
}

func (_c *MockDrawer_Label_Call) Return() *MockDrawer_Label_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDrawer_Label_Call) RunAndReturn(run func(image.Point, string, int, color.Gray)) *MockDrawer_Label_Call {
	_c.Call.Return(run)
	return _c
}

// TranslateScale provides a mock function with given fields: _a0, _a1
func (_m *MockDrawer) TranslateScale(_a0 image.Point, _a1 int) {
	_m.Called(_a0, _a1)
}

// MockDrawer_TranslateScale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TranslateScale'
type MockDrawer_TranslateScale_Call struct {
	*mock.Call
}

// TranslateScale is a helper method to define mock.On call
//   - _a0 image.Point
//   - _a1 int
func (_e *MockDrawer_Expecter) TranslateScale(_a0 interface{}, _a1 interface{}) *MockDrawer_TranslateScale_Call {
	return &MockDrawer_TranslateScale_Call{Call: _e.mock.On("TranslateScale", _a0, _a1)}
}

func (_c *MockDrawer_TranslateScale_Call) Run(run func(_a0 image.Point, _a1 int)) *MockDrawer_TranslateScale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(image.Point), args[1].(int))
	})
	return _c
}

func (_c *MockDrawer_TranslateScale_Call) Return() *MockDrawer_TranslateScale_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDrawer_TranslateScale_Call) RunAndReturn(run func(image.Point, int)) *MockDrawer_TranslateScale_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDrawer creates a new instance of MockDrawer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDrawer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDrawer {
	mock := &MockDrawer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
